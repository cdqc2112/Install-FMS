{{ $serv_id := "proxy" }}
{{ $serv_uidgid := .Values.env.PROXY_UID_GID }}
{{ $data_id := "update-distribution" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fms.fullname" . }}-{{$serv_id}}
  labels:
    {{- include "fms.labels" . | nindent 4 }}
    app.kubernetes.io/service: {{$serv_id}}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "fms.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/service: {{$serv_id}}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "fms.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/service: {{$serv_id}}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fms.serviceAccountName" . }}
      securityContext:
        runAsUser: {{ (split ":" $serv_uidgid)._0 }}
        runAsGroup: {{ (split ":" $serv_uidgid)._1 }}
        fsGroup: {{ (split ":" $serv_uidgid)._1 }}
      nodeSelector:
        role: "primary"
        endpoints: "true"
      initContainers:
      {{ if (ne .Values.env.PROXY_UID_GID "0:0") }}
      # This way is a bit rude. possibly having a sysctl net.ipv4.ip_unprivileged_port_start in the security context would be enough
      - name: init-sysctl
        {{ include "fms.docker-image" (merge (dict "image_id" "fms-proxy") $ ) | nindent 8 }}
        args:
        - sysctl
        - net.ipv4.ip_unprivileged_port_start=0
        securityContext:
          privileged: true
          runAsUser: 0
      {{ end }}

      containers:
        - name: {{$serv_id}}
          {{ include "fms.docker-image" (merge (dict "image_id" "fms-proxy") $ ) | nindent 10 }}
          imagePullPolicy: IfNotPresent
          env:
          - name: "DNS_SUFFIX"
            value: ".default.svc.cluster.local"
          - name: "WEB_APP_DNS"
            value: "{{.Values.env.TOPOLOGY_UI_DNS}}"
          - name: "DEFAULT_SERVER_DNS"
            value: "{path: '{{.Values.env.TOPOLOGY_UI_DNS}}', service: 'topology-ui:8080' }"
          - name: "MAP_DNS_TOPOLOGY"
            value: "{name: 'topology-api', path: '{{.Values.env.TOPOLOGY_API_DNS}}', service: 'topology-api:9090' }"
          - name: "MAP_DNS_KEYCLOAK"
            value: "{name: 'keycloak', path: '{{.Values.env.KEYCLOAK_DNS}}', service: 'keycloak:8080', noauth: true, norewrite: true, subfolders: [ { pattern: '~ ^/auth/admin/realms/Fiber/clients/.*/installation/providers/keycloak-oidc-keycloak-json', service: 'keycloak:8080', options: 'sub_filter_types text/plain ; sub_filter ''/auth/\"'' ''/auth\"'' ;' } ] }"
          - name: "MAP_DNS_MEASDATA"
            value: "{name: 'measurement_data', path: '{{.Values.env.DATA_DNS}}', service: 'measurement-data:8080' , subfolders: [ { path: '/upload', service: 'measurement-files:9080' } ] }"
          - name: "MAP_DNS_ALARM"
            value: "{name: 'alarming', path: '{{.Values.env.ALARM_DNS}}', service: 'alarming:7070' }"
          - name: "PROXY_SECRET_LUA_SESSION_FILE_PATH"
            value: "/run/secrets/proxy_session"
          - name: "MAP_FOLDER_ADMIN_ACTIVEMQ"
            value: "{path: '/admin/activemq', service: 'rtu-broker:8161', 'roles': '{\"fg-sys-admin\"}', 'options': 'proxy_set_header Authorization \"Basic YWRtaW46YWRtaW4=\";\nsub_filter ''<base href=\\''/hawtio/\\''>''  ''<base href=\\''/admin/activemq/hawtio/\\''>'';\n' }"
          - name: "MAP_FOLDER_ADMIN_MEASHAND"
            value: "{path: '/admin/measurement-handler', service: 'rtu-broker:8161', 'roles': '{\"fg-sys-admin\"}', 'options': 'proxy_set_header Authorization \"Basic YWRtaW46YWRtaW4=\";\nsub_filter ''<base href=\\''/hawtio/\\''>''  ''<base href=\\''/admin/measurement-handler/hawtio/\\''>'';\n' }"
          - name: "MAP_FOLDER_ADMIN_MEASHAND_JOL"
            value: "{path: '/admin/measurement-handler/hawtio/jolokia', service: 'measurement-handler:8161', 'roles': '{\"fg-sys-admin\"}', 'options': 'proxy_set_header Authorization \"Basic YWRtaW46YWRtaW4=\";\nrewrite ^ /jolokia/ break;\n' }"
          - name: "MAP_FOLDER_WORKFLOW_SERVER"
            value: "{path: '/workflow/server', service: 'conductor-server:8080', 'roles': '{\"fg-sys-admin\"}' }"
          - name: "MAP_FOLDER_WORKFLOW_UI"
            value: "{path: '/workflow/ui', service: 'conductor-ui:5000', 'roles': '{\"fg-sys-admin\"}' }"
          - name: "MAP_FOLDER_ADMIN_ES"
            value: "{path: '/admin/es', service: 'conductor-elasticsearch-cerebro:8080', 'roles': '{\"fg-es-administrator\"}' }"
          - name: "MAP_FOLDER_ADMIN_VICTORIA_METRICS"
            value: "{path: '/admin/victoria-metrics', service: 'victoria-metrics:8428', 'roles': '{\"fg-sys-admin\"}' }"
          - name: "IAM_TYPE"
            value: "{{.Values.env.IAM_TYPE}}"
          - name: "IAM_IAT_SLACK_SEC"
            value: "{{.Values.env.IAM_IAT_SLACK_SEC}}"
          - name: "IAM_SERVER"
            value: "{{.Values.env.IAM_SERVER}}"
          - name: "IAM_USSP"
            value: "{{.Values.env.IAM_USSP}}"
          - name: "IAM_CLIENT_ID"
            value: "{{.Values.env.IAM_CLIENT_ID}}"
          - name: "IAM_ADMIN_USER"
            value: "{{.Values.env.IAM_ADMIN_USER}}"
          - name: "IAM_ADMIN_PASSWORD"
            value: "{{.Values.env.IAM_ADMIN_PASSWORD}}"
          - name: "ROOT_DNS"
            value: "{{.Values.env.ROOT_DNS}}"
          - name: "CER_ROOT"
            value: "/opt/fgms/cer/"
          - name: "DEBUG"
            value: "{{.Values.env.DEBUG}}"
          - name: "LOG_PERIOD"
            value: "{{.Values.env.PROXY_LOG_EXPIRATION_PERIOD}}"
          - name: "HTTP_PORT"
            value: "1080"
          - name: "IAM_CLIENT_SECRET_FILE"
            value: "/run/secrets/iam_client_secret"
          - name: "NGINX_UID_GID"
            value: "{{ if (eq .Values.env.PROXY_UID_GID .Values.env.PROXY_EFFECTIVE_UID_GID) }}{{ else }}{{ .Values.env.PROXY_EFFECTIVE_UID_GID }}{{ end }}"
          - name: "IAM_PROXY"
            value: "http://keycloak-proxy.default.svc.cluster.local:10000"
          - name: "TLS_PROTOCOL"
            value: "{{.Values.env.TLS_VERSION}}"
          - name: "TLS13_CIPHERS"
            value: "{{.Values.env.PROXY_TLS13_CIPHER_SUITES}}"
          - name: "TLS12_CIPHERS"
            value: "{{.Values.env.PROXY_TLS12_CIPHER_SUITES}}"
          # Not the same than swarm. Must be a service
          ports:
          - name: http
            containerPort: 80
            protocol: TCP
          - name: https
            containerPort: 443
            hostPort: 443
            protocol: TCP
          volumeMounts:
          - mountPath: /var/log/nginx
            name: logs
          - mountPath: /updates/logs
            name: rtu-update-logs
          - mountPath: /general/logs
            name: rtu-general-logs
          - mountPath: /updates/dist
            name: update-dist
            readOnly: true
          - mountPath: /run/secrets/proxy_session
            name: proxy-session-secret
            subPath: secret
            readOnly: true
          - mountPath: /secret/key
            name: rtu-version-controller-token-secret
            subPath: secret
            readOnly: true
          - mountPath: /run/secrets/iam_client_secret
            name: iam-client-secret
            subPath: secret
            readOnly: true
          {{ if not ( empty .Values.env.SERVER_CERT_KEY_SECRET )  }}
          - mountPath: /opt/fgms/ssl/single.key
            name: certificate-key
            subPath: secret
            readOnly: true
          {{ end }}
          {{ if not ( empty .Values.env.SERVER_CERT_SECRET ) }}
          - mountPath: /opt/fgms/ssl/single.cert
            name: certificate
            subPath: secret
            readOnly: true
          {{ end }}
          resources:
            limits:
              memory: "1024M"
            requests:
              memory: "102.4M"
      volumes:
      - name: logs
        {{- include "fms.pod-volume.log" (merge (dict "id" $serv_id "path" .Values.env.PROXY_LOG) $) | nindent 8 }}
      - name: rtu-update-logs
        {{- include "fms.pod-volume.log" (merge (dict "id" $serv_id "path" .Values.env.RTU_UPDATES_LOGS) $) | nindent 8 }}
      - name: rtu-general-logs
        {{- include "fms.pod-volume.log" (merge (dict "id" $serv_id "path" .Values.env.RTU_GENERAL_LOGS) $) | nindent 8 }}
      - name: update-dist  
        # FIXME: out of scope for now
        emptyDir: {}
      - name: proxy-session-secret
        secret:
          secretName: {{.Values.env.PROXY_SESSION_SECRET}}
          defaultMode: 0440
      - name: rtu-version-controller-token-secret
        secret:
          secretName: {{.Values.env.RTU_VERSION_CONTROLLER_TOKEN_SECRET}}
          defaultMode: 0440
      - name: iam-client-secret
        secret:
          secretName: {{.Values.env.IAM_CLIENT_SECRET}}
      {{ if not ( empty .Values.env.SERVER_CERT_SECRET ) }}
      - name: certificate
        secret:
          secretName: {{.Values.env.SERVER_CERT_SECRET}}
          defaultMode: 0440
      {{ end }}
      {{ if not ( empty .Values.env.SERVER_CERT_KEY_SECRET )  }}
      - name: certificate-key
        secret:
          secretName: {{.Values.env.SERVER_CERT_KEY_SECRET}}
          defaultMode: 0440
      {{ end }}
