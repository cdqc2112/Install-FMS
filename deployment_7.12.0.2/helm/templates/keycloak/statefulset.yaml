{{ $serv_id := "keycloak" }}
{{ $serv_uidgid := .Values.env.KEYCLOAK_UID_GID }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "fms.fullname" . }}-{{$serv_id}}
  labels:
    {{- include "fms.labels" . | nindent 4 }}
    app.kubernetes.io/service: {{$serv_id}}
spec:
  serviceName: {{ include "fms.fullname" . }}-{{$serv_id}}
  replicas: 1
  selector:
    matchLabels:
      {{- include "fms.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/service: {{$serv_id}}
  template:
    metadata:
      labels:
        {{- include "fms.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/service: {{$serv_id}}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fms.serviceAccountName" . }}
      securityContext:
        runAsUser: {{ (split ":" $serv_uidgid)._0 }}
        runAsGroup: {{ (split ":" $serv_uidgid)._1 }}
        fsGroup: {{ (split ":" $serv_uidgid)._1 }}
      nodeSelector:
        role: "primary"
      containers:
        - name: {{$serv_id}}
          {{ include "fms.docker-image" (merge (dict "image_id" "fms-security") $ ) | nindent 10 }}
          imagePullPolicy: IfNotPresent
          env:
          - name: MASTER_USER_ADMIN
            value: "{{.Values.env.KEYCLOAK_MASTER_ADMIN_USER_INIT}}:/run/secrets/keycloak_master_pwd"
          - name: JSON_MASTER_USER_ADMIN
            value: |
              "realmRoles":["admin","uma_authorization","offline_access"],
              "clientRoles" : { "realm-management" : [ "manage-events", "impersonation", "manage-realm", "manage-authorization", "manage-users" ], "account" : [ "view-profile", "manage-account" ] }
          - name: FIBER_USER_ADMIN
            value: "{{.Values.env.KEYCLOAK_FIBER_ADMIN_USER_INIT}}:/run/secrets/keycloak_pwd"
          - name: JSON_FIBER_USER_ADMIN
            value: |
               "realmRoles":["fg-topology-master","fg-results-master","fg-test-control-master","uma_authorization","offline_access","grafana-access"],
               "requiredActions" : [ "UPDATE_PASSWORD" ],
               "clientRoles" : { "realm-management" : [ "manage-events", "impersonation", "manage-realm", "manage-authorization", "manage-users" ], "account" : [ "view-profile", "manage-account" ] }
          - name: FIBER_USER_TEST
            value: "{{.Values.env.KEYCLOAK_FIBER_TEST_USER_INIT}}:/run/secrets/keycloak_test_pwd"
          - name: JSON_FIBER_USER_TEST
            value: |
               "realmRoles":["fg-results-read","fg-topology-master"]
          - name: TOPOLOGY_API_DNS
            value: "{{.Values.env.TOPOLOGY_API_DNS}}"
          - name: KEYCLOAK_DNS
            value: "{{.Values.env.KEYCLOAK_DNS}}"
          - name: TOPOLOGY_UI_DNS
            value: "{{.Values.env.TOPOLOGY_UI_DNS}}"
          - name: DATA_DNS
            value: "{{.Values.env.DATA_DNS}}"
          - name: KC_DB
            value: "postgres"
          - name: KC_DB_DATABASE
            value: "keycloak"
          - name: KC_DB_USERNAME
            value: "keycloak"
          - name: DB_PASSWORD_FILE
            value: "/run/secrets/keycloak_db_pwd"
          - name: KC_DB_URL_HOST
            value: "keycloak-postgresql"
          - name: KC_DB_URL_PORT
            value: "5432"
          - name: KC_HOSTNAME
            value: "{{.Values.env.KEYCLOAK_DNS}}"
          - name: KC_PROXY
            value: "edge"
          - name: FGMS_TRUSTSTORE_PATH
            value: "/opt/fgms/cer/fgmstruststore.jks"
          - name: FGMS_TRUSTSTORE_PASSWD_FILE
            value: "/opt/fgms/cer/fgms_truststore_passwd"
          - name: IMPORT_FORCE
            value: "true"
          - name: EDITION
            value: "{{.Values.env.EDITION}}"
          - name: PROXY_ADDRESS_FORWARDING
            value: "true"
          - name: KEYCLOAK_SECRET_FILE
            value: "/run/secrets/iam_client_secret"
          - name: KEYCLOAK_SERVICE_AUTHORIZATION_PROXY_SECRET_FILE
            value: "/run/secrets/iam_service_authorization_proxy_client_secret"
          - name: JAVA_OPTS_APPEND
            value: "-XX:+ExitOnOutOfMemoryError -XX:+CrashOnOutOfMemoryError -Xms1024m -Xmx2042m"
          - name: KEYCLOAKLOGS_CONF_ROTATE
            value: "rotate ${KEYCLOAK_LOG_EXPIRATION_PERIOD_DAYS}"
          volumeMounts:
          - name: config
            mountPath: /opt/fgms/keycloak/config
            readOnly: true
          - name: container-conf
            mountPath: /opt/keycloak/conf
          - name: logs
            mountPath: /opt/keycloak/data/log
          - name: keycloak-db-pwd
            mountPath: /run/secrets/keycloak_db_pwd
            subPath: secret
            readOnly: true
          - name: iam-client-secret
            mountPath: /run/secrets/iam_client_secret
            subPath: secret
            readOnly: true
          - name: iam-service-authorization-proxy-client-secret
            mountPath: /run/secrets/iam_service_authorization_proxy_client_secret
            subPath: secret
            readOnly: true
          {{ if and ( not ( empty .Values.env.KEYCLOAK_FIBER_ADMIN_USER_INIT ) ) ( not ( empty .Values.env.KEYCLOAK_FIBER_ADMIN_USER_INIT_SECRET ) ) }}
          - name: keycloak-fiber-admin-user-pwd
            mountPath: /run/secrets/keycloak_pwd
            subPath: secret
            readOnly: true
          {{ end }}
          {{ if and ( not ( empty .Values.env.KEYCLOAK_FIBER_TEST_USER_INIT ) ) ( not ( empty .Values.env.KEYCLOAK_FIBER_TEST_USER_INIT_SECRET ) ) }}
          - name: keycloak-fiber-test-user-pwd
            mountPath: /run/secrets/keycloak_test_pwd
            subPath: secret
            readOnly: true
          {{ end }}
          {{ if and ( not ( empty .Values.env.KEYCLOAK_MASTER_ADMIN_USER_INIT ) ) ( not ( empty .Values.env.KEYCLOAK_MASTER_ADMIN_USER_INIT_SECRET ) ) }}
          - name: keycloak-master-admin-user-pwd
            mountPath: /run/secrets/keycloak_master_pwd
            subPath: secret
            readOnly: true
          {{ end }}
          startupProbe:
            exec:
              command: [ timeout, '5', bash, -c, '[ -f "$INIT_DONE_FILE" ] && cat < /dev/null > /dev/tcp/localhost/8080 && cat < /dev/null > /dev/tcp/localhost/8443' ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 8
            # Allowed startup time
            failureThreshold: 90
          livenessProbe:
            exec:
              command: [ timeout, '5', bash, -c, '[ -f "$INIT_DONE_FILE" ] && cat < /dev/null > /dev/tcp/localhost/8080 && cat < /dev/null > /dev/tcp/localhost/8443' ]
            timeoutSeconds: 8
            periodSeconds: 30
            failureThreshold: 3
          resources:
            limits:
              memory: "3072M"
            requests:
              memory: "307.2M"
      volumes:
      - name: config
        {{- include "fms.pod-volume.config" (merge (dict "id" "KEYCLOAK_CONFIG") $) | nindent 8 }}
      - name: logs
        {{- include "fms.pod-volume.log" (merge (dict "id" $serv_id "path" .Values.env.KEYCLOAK_LOG) $) | nindent 8 }}
      - name: keycloak-db-pwd
        secret:
          secretName: {{.Values.env.KEYCLOAK_DB_PASSWORD_SECRET}}
          defaultMode: 0440
      - name: iam-client-secret
        secret:
          secretName: {{.Values.env.IAM_CLIENT_SECRET}}
          defaultMode: 0440
      - name: iam-service-authorization-proxy-client-secret
        secret:
          secretName: {{.Values.env.IAM_SERVICE_AUTHORIZATION_PROXY_CLIENT_SECRET}}
          defaultMode: 0440
      {{ if and ( not ( empty .Values.env.KEYCLOAK_FIBER_ADMIN_USER_INIT ) ) ( not ( empty .Values.env.KEYCLOAK_FIBER_ADMIN_USER_INIT_SECRET ) ) }}
      - name: keycloak-fiber-admin-user-pwd
        secret:
          secretName: {{.Values.env.KEYCLOAK_FIBER_ADMIN_USER_INIT_SECRET}}
          defaultMode: 0440
      {{ end }}
      {{ if and ( not ( empty .Values.env.KEYCLOAK_FIBER_TEST_USER_INIT ) ) ( not ( empty .Values.env.KEYCLOAK_FIBER_TEST_USER_INIT_SECRET ) ) }}
      - name: keycloak-fiber-test-user-pwd
        secret:
          secretName: {{.Values.env.KEYCLOAK_FIBER_TEST_USER_INIT_SECRET}}
          defaultMode: 0440
      {{ end }}
      {{ if and ( not ( empty .Values.env.KEYCLOAK_MASTER_ADMIN_USER_INIT ) ) ( not ( empty .Values.env.KEYCLOAK_MASTER_ADMIN_USER_INIT_SECRET ) ) }}
      - name: keycloak-master-admin-user-pwd
        secret:
          secretName: {{.Values.env.KEYCLOAK_MASTER_ADMIN_USER_INIT_SECRET}}
          defaultMode: 0440
      {{ end }}
      - name: container-conf
        emptyDir:
          medium: Memory